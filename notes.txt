



https://doc.rust-lang.org/stable/book/ch01-02-hello-world.html

## Immediate To Do list

It has come to my attention that I literally open a gazillion images and never close them every time I make a mosaic
What I should be doing is dealing with an object that simply knows how to find the image and then opening it when I need to and closing it when I don't.
This required a fairly large overhaul to the system. 

basically, the create method will need to change a bit because it will now need to open the file
also, everything that references ".img" might need to be updated. 

Continue with piece pinning

make opacity an arg to the output html function (separate from django)

Check out facial recognition using the dlib library
https://pypi.org/project/dlib/
https://www.pyimagesearch.com/2017/04/10/detect-eyes-nose-lips-jaw-dlib-opencv-python/
https://towardsdatascience.com/detecting-face-features-with-python-30385aee4a8e


Implement section priority and a helper function that sets the priority from the center outward. 
	This is finished, I think I would like to do something like the following:

	Loop through the grid and put all of the sections into a list
	sort the list by priority
	loop through this list to create a mosaic instead of nesting the grid
	if all the sections have the same prio than it doesn't matter anyway. 

Think of way to have getter and setter for appearances, but also be able to keep track of the data manually
then only when you want have the getter/setter update it at the end. I'm sure there is a way to do this. 


## To Do List

CHOOSE MATCH
Save list of potential matches and associated error on each section? maybe just the top 10?

I'm thinking of the case when you're looking at the mosaic and you click on a piece and you want to quickly swap it out for something else, instead of doing a bunch of calcs, why not just pop up a list of potential alternatives (because you've already done all the calculations)

EXIF DATA
figure out the damned exif data problem - that should probably be #1 priority
maybe just use imagemagick instead of pil :/

SECTION PRIORITY
Something that detects edges and automatically adjust the priority of the pieces with the most complex edges in them?
But first I have to get the priority thing working.
allow for sections to have priority so that uniqueness contraints don't reduce quality where it matters. 

PIECE MANIPULATION
Ability to check the mirror image of all the pieces? That could be a setting like way later on, that would mean the same image object would have to be able to store multiple error metrics. That's big time. 

Add ability to zoom in a little bit on photos? for certain types of photos this is good to do because things that are images of an object with other stuff around it are usually not good for quality

When the function selects an image, automatically filter the image/edit the image so that it exactly matches
the target section in terms of comparison criteria
How to do this though?


MOSAIC POST EDITING
The ability to pin certain photos that come up and then randomize/redo the rest?
just give a pinned attribute? if pinned: pass? this belongs on the section I think

Flag sections with first instance of? Maybe the pieces objects should be incremented whenever they are chosen?
That way pieces can have a maximum usage flag applied to them! I'm liking this. 

It would be cool to look at the mosaic with only one instance of each photo highlighted. 

Ability to pin sections (keep the same piece no matter what happens). If a piece is pinned, then other constaints need to be followed which might force nearby sections to update their piece.

## have the mosaic object keep track of the most recent mosaic that was created,
that way when you go to create a new one, if the f, rf, and ef are the same, I think you can leave the pieces list and 
sections color data on there?


With these two functionalities
1.) section priority
		loop through the section and get a unique list of priorities and reverse sort it
		loop through the priorities in reverse order
			loop through the sections
				if a section has the current priority, find a match for it!
				if it doesn't or it (already has a piece and is pinned), then skeep it. 

	put in a helper function that can have the priority concentrically travel in from the outside (center gets higher priority) 


2.) piece maximums
		if the current piece you are about to select has a max
			if the times_used < max
				go ahead and use it (increment times_used of course)
			elif the times_used >= max:
				check to see if there are any pieces that either
					don't have a max
					haven't reached their max
					haven't exceeded their max as much as this one
				if there are:
					using something else:
				if ther are not:
					I guess you have to use this one, sorry!


This is starting to feel like piece_list should be part of mosaic again. hmmmmmm, maybe I need to move forward a bit more with using a database to populate piece list. It would force me to do things more stringently. 



## Take in more image formats


## Option to force the use of all images - 
## This means that instead of finding the best piece for each section, you are finding the best section for each piece.
## It's kind of like just switching obj1 and obj2, but keeping the coordinates on obj2 and putting the mosaic together afterwards?

## metrics
## number of unique pieces AND their counts and locations? in the mosaic?



# Add ability to modify individual components of the grid (then resave the image)
# Add ability to remove all of a specific instance of a photo and replace it with something else
# or edit all instances of a photo at once. 

# I kind of want to try allowing non-square images, but...... later. 






## Image Search Functionality can get roughly 60-100 images for a given query.
## A base of 10,000 images is probably pretty good (of various colors or course)


## The bottom line is that the more sophisticated you get, the more intertwined piece_list and master become. 




 This was from when I used to need to find a piece based on it's file name instead of just dealing with the piece object directly

 		## This is using the filename as the unique identifier for pieces at the moment
		## Will hopefully change in the future when starting to use a database. 
		for piece in master_blacklist:				
			#if hasattr(item,'piece'):
				## Find where the neighbor's piece is in the pieces list. Straight from SO baby. 
				#piece = next((x for x in pieces if x.original_image.filename == item.piece.original_image.filename), None)

				## Update it's error to be nothing (and properly handle None on sort)
				## I'm not particularly happy about how I'm handling this atm. 
			piece.error = None



Make mosaics a group thing, have people link over their own google photo albums? annotate single photos, instances of photos?


3. Only allow squares to be saved the square shall be the largest center square of each image? Or maybe it's better to save the image (what default resolution?) and then enforce the square thing later?






Images that have transparencies should not be used. If I ever start saving some of these images, 4 channel images can just be turned into 3 channel images, or I can make the mosaic background white, but I shouldn't have to rely on that. 


## Future Work
When I have a web-based version of this, free users will have limited options for the size of the query images and base images, and how many queries they can have at one time etc. This is so that bandwith doesn't get crazy. Paid users will have the ability to make much "larger" mosaics. 

Generate a list of unique images so that the user can scroll through and make sure that there is nothing disgusting/offensive. Save the info when a user flags an image and notify other users when they create a mosaic that has images that have been flagged by other users in the past. - This should be easy find. Take the list of links used to generate the html doc and make a set out of it, find a way to display that data. I tried it out and the set thing seems to work, I don't have the internet right now so I have to design a page to show them and then check it out. It wasn't that bad, out of a 1900 image pool, it took 80 uniques to fill 2500 spots. Definitely manageable when trying to weed out taboo images. 

Be able to mix desired preset images and fill the rest with random/ queried images. Then people could hide certain images in there. have a setting where you can choose to have certain images be used in the selection process (no guarantee that they will be selected), After the fact go through and find the best spots for these special images (will be worse then images replace, but best spot for the forced image), click on images and choose select force image with option to upload, use previously uploaded image, or link. 

Free users can "Save" a mosaic once a week, as in save the images in the mosaic so that the mosaic will be reproducable. instead of just savings the links, which they can do as much as they want. Paid users will be able to save as many mosaics as they want. 

Have categories for each user, once they are searched for they are available to all users, categories that are avaiable are selectable, categories that are yet to be searched for (searches take up to 5-10 minutes for 100 images).
I can swing only savings data for the most find grained because I can derive the rest from that?

I want to use Django for this. Should I pay for a host or experiment with a Wamp/Lamp server first to save money?
I will use wamp for now and try really hard to Django it up. The first steps from the web side are to have users? a home page?